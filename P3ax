-- Create the GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "EnhancedToggleGui"
screenGui.Parent = game.CoreGui

-- Create Main Frame
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 300, 0, 250)
mainFrame.Position = UDim2.new(0.5, -150, 0.5, -125)
mainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui

-- Rounded edges for Main Frame
local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(0, 10)
uiCorner.Parent = mainFrame

-- Gradient Background
local uiGradient = Instance.new("UIGradient")
uiGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 255))
}
uiGradient.Parent = mainFrame

-- Create Promotion Label
local label = Instance.new("TextLabel")
label.Name = "PromotionLabel"
label.Text = "P3ax"
label.Size = UDim2.new(0, 100, 0, 30)
label.Position = UDim2.new(0, 20, 0, 20)
label.BackgroundTransparency = 1
label.TextColor3 = Color3.fromRGB(255, 255, 255)
label.Font = Enum.Font.SourceSansBold
label.TextSize = 20
label.Parent = mainFrame

-- Button Functionality Template
local function createStylishButton(name, text, position)
    local button = Instance.new("TextButton")
    button.Name = name
    button.Text = text
    button.Size = UDim2.new(0, 260, 0, 50)
    button.Position = position
    button.BackgroundColor3 = Color3.fromRGB(70, 70, 70) -- Placeholder background
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Font = Enum.Font.SourceSans
    button.TextSize = 18
    button.Parent = mainFrame

    -- Rounded corners for button
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = button

    -- Gradient background for button
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 128, 0)), -- Start color
        ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 128, 255))  -- End color
    }
    gradient.Parent = button

    return button
end

-- ESP Button
local espButton = createStylishButton("ESPButton", "ESP: OFF", UDim2.new(0, 20, 0, 60))
local rgbEspButton = createStylishButton("RGBESPButton", "RGB ESP: OFF", UDim2.new(0, 20, 0, 120))
local aimbotButton = createStylishButton("AimbotButton", "Aimbot: OFF", UDim2.new(0, 20, 0, 180))

local espEnabled = false
local rgbEspEnabled = false
local aimbotEnabled = false
local rainbowLoop

-- Basic ESP Toggle
espButton.MouseButton1Click:Connect(function()
    espEnabled = not espEnabled
    espButton.Text = espEnabled and "ESP: ON" or "ESP: OFF"
    if espEnabled then
        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= game.Players.LocalPlayer and player.Character then
                local highlight = Instance.new("Highlight")
                highlight.FillTransparency = 1
                highlight.OutlineTransparency = 0
                highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
                highlight.Parent = player.Character
            end
        end
    else
        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Character then
                for _, obj in pairs(player.Character:GetChildren()) do
                    if obj:IsA("Highlight") then
                        obj:Destroy()
                    end
                end
            end
        end
    end
end)

-- RGB ESP Toggle
rgbEspButton.MouseButton1Click:Connect(function()
    rgbEspEnabled = not rgbEspEnabled
    rgbEspButton.Text = rgbEspEnabled and "RGB ESP: ON" or "RGB ESP: OFF"

    if rgbEspEnabled then
        -- Start rainbow loop
        rainbowLoop = game:GetService("RunService").RenderStepped:Connect(function()
            for _, player in pairs(game.Players:GetPlayers()) do
                if player ~= game.Players.LocalPlayer and player.Character then
                    local highlight = player.Character:FindFirstChildOfClass("Highlight")
                    if not highlight then
                        highlight = Instance.new("Highlight")
                        highlight.FillTransparency = 1
                        highlight.OutlineTransparency = 0
                        highlight.Parent = player.Character
                    end
                    -- Cycle through rainbow colors
                    local hue = (tick() % 5) / 5 -- Hue shift over time
                    highlight.OutlineColor = Color3.fromHSV(hue, 1, 1)
                end
            end
        end)
    else
        -- Stop rainbow loop
        if rainbowLoop then
            rainbowLoop:Disconnect()
        end
        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Character then
                for _, obj in pairs(player.Character:GetChildren()) do
                    if obj:IsA("Highlight") then
                        obj:Destroy()
                    end
                end
            end
        end
    end
end)

-- Aimbot Logic
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local Locked = false
local TargetHead = nil

local function GetClosestHead()
    local closestDistance = math.huge
    local closestHead = nil

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local head = player.Character.Head
            local headPosition = head.Position
            local screenPosition, onScreen = Camera:WorldToViewportPoint(headPosition)

            if onScreen then
                local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                local distance = (screenCenter - Vector2.new(screenPosition.X, screenPosition.Y)).Magnitude

                if distance < closestDistance then
                    closestDistance = distance
                    closestHead = head
                end
            end
        end
    end

    return closestHead
end

aimbotButton.MouseButton1Click:Connect(function()
    aimbotEnabled = not aimbotEnabled
    aimbotButton.Text = aimbotEnabled and "Aimbot: ON" or "Aimbot: OFF"

    if aimbotEnabled then
        Locked = true -- Enable camera lock
    else
        Locked = false -- Disable camera lock
        TargetHead = nil
    end
end)

RunService.RenderStepped:Connect(function()
    if aimbotEnabled and Locked then
        if not TargetHead or not TargetHead.Parent then
            TargetHead = GetClosestHead()
        end
        if TargetHead then
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, TargetHead.Position)
        end
    end
end)

-- Minimize Button
local minimizeButton = Instance.new("TextButton")
minimizeButton.Name = "MinimizeButton"
minimizeButton.Text = "-"
minimizeButton.Size = UDim2.new(0, 30, 0, 30)
minimizeButton.Position = UDim2.new(1, -40, 0, 5)
minimizeButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
minimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
minimizeButton.Parent = mainFrame

-- Rounded corners for minimize button
local minimizeCorner = Instance.new("UICorner")
minimizeCorner.CornerRadius = UDim.new(0, 10)
minimizeCorner.Parent = minimizeButton

local minimized = false
minimizeButton.MouseButton1Click:Connect(function()
    minimized = not minimized
    for _, child in pairs(mainFrame:GetChildren()) do
        if child ~= minimizeButton and not child:IsA("UICorner") and not child:IsA("UIGradient") then
            child.Visible = not minimized
        end
    end
    mainFrame.Size = minimized and UDim2.new(0, 300, 0, 50) or UDim2.new(0, 300, 0, 250)
    minimizeButton.Text = minimized and "+" or "-"
    label.Position = UDim2.new(0, 20, 0, minimized and 5 or 20)
end)

-- Dragging Functionality
local dragging = false
local dragStart, startPos

mainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position
    end
end)

mainFrame.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
end)

mainFrame.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = false
    end
end)
